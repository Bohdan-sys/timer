{"version":3,"sources":["contexts/TimerReducer.js","contexts/TimerProvider.js","components/Display.js","components/Control.js","App.js","reportWebVitals.js","index.js"],"names":["TIMER","START","WAIT","RESET","handlers","timerState","payload","timer","start","wait","state","timerReducer","action","type","DEFAULT","TimerContext","React","createContext","TimerContextProvider","children","increment","useRef","useState","Date","now","time","setTime","useReducer","dispatch","Provider","value","formatTime","getSeconds","slice","minutes","Math","floor","getMinutes","getHours","startWatch","clearInterval","current","setInterval","resetWatch","waitWatch","Display","useContext","className","useStyles","makeStyles","root","margin","width","Control","classes","Button","variant","color","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.54fa86ab.chunk.js","sourcesContent":["export const TIMER = 'TIMER'\r\nexport const START = 'START'\r\nexport const WAIT = 'WAIT'\r\nexport const RESET = 'RESET'\r\nconst handlers = {\r\n    [TIMER]: (timerState, { payload }) => ({\r\n        ...timerState,\r\n        timer: timerState.timer + payload,\r\n    }),\r\n    [START]: (timerState) => ({\r\n        ...timerState, start: !timerState.start, wait: false\r\n    }),\r\n    [RESET]: (timerState) => ({\r\n        ...timerState, timer: 0\r\n    }),\r\n    [WAIT]: (timerState) => ({\r\n        ...timerState, start: false, wait: !timerState.wait\r\n    }),\r\n\r\n    DEFAULT: state => state\r\n}\r\n\r\nexport const timerReducer = (timerState, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT\r\n    return handle(timerState, action)\r\n}","import React, { useReducer, useRef, useState } from \"react\";\r\nimport { timerReducer, TIMER, START, WAIT, RESET } from './TimerReducer'\r\n\r\nexport const TimerContext = React.createContext();\r\n\r\nexport const TimerContextProvider = ({ children }) => {\r\n    const increment = useRef(null);\r\n    const [time, setTime] = useState(Date.now());\r\n    const initialTimerState = {\r\n        timer: 0,\r\n        start: false,\r\n        wait: false,\r\n    }\r\n    const [timerState, dispatch] = useReducer(timerReducer, initialTimerState)\r\n    const formatTime = () => {\r\n        const getSeconds = `0${(timerState.timer % 60)}`.slice(-2)\r\n        const minutes = `${Math.floor(timerState.timer / 60)}`\r\n        const getMinutes = `0${minutes % 60}`.slice(-2)\r\n        const getHours = `0${Math.floor(timerState.timer / 3600)}`.slice(-2)\r\n        return `${getHours} : ${getMinutes} : ${getSeconds}`\r\n    }\r\n\r\n    const startWatch = () => {\r\n        dispatch({ type: START })\r\n        if (!timerState.start) {\r\n            increment.current = setInterval(() => {\r\n                dispatch({\r\n                    type: TIMER,\r\n                    payload: 1\r\n                })\r\n            }, 1000)\r\n        } else {\r\n            clearInterval(increment.current)\r\n            dispatch({\r\n                type: RESET,\r\n            })\r\n        }\r\n    }\r\n\r\n    const resetWatch = () => {\r\n        dispatch({\r\n            type: RESET,\r\n        })\r\n    }\r\n\r\n    const waitWatch = () => {\r\n        if (Date.now() - time < 300) {\r\n            clearInterval(increment.current)\r\n            dispatch({\r\n                type: WAIT,\r\n            })\r\n            return\r\n        }\r\n        setTime(Date.now())\r\n    }\r\n\r\n    return (\r\n        <TimerContext.Provider value={{\r\n            timerState: timerState,\r\n            formatTime: formatTime,\r\n            startWatch: startWatch,\r\n            resetWatch: resetWatch,\r\n            waitWatch: waitWatch,\r\n            start: timerState.start\r\n        }}>\r\n            {children}\r\n        </TimerContext.Provider>\r\n    )\r\n}\r\n","import React, { useContext, useEffect } from 'react'\r\nimport { TimerContext } from \"../contexts/TimerProvider\";\r\n\r\nexport const Display = () => {\r\n    const { formatTime } = useContext(TimerContext)\r\n\r\n\r\n    return (\r\n        <div className=\"display\">\r\n            <h1 className=\"caption caption--align_center caption--size_3\">{formatTime()}</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, { useContext } from 'react'\r\nimport { TimerContext } from \"../contexts/TimerProvider\";\r\n\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        margin: '4px 8px',\r\n        width: 100\r\n    },\r\n});\r\n\r\nexport const Control = () => {\r\n    const { startWatch, resetWatch, waitWatch, start } = useContext(TimerContext)\r\n    const classes = useStyles();\r\n    return (\r\n        <div className=\"control\">\r\n            <Button variant=\"contained\" color=\"primary\" onClick={() => { startWatch() }} className={classes.root}>\r\n                {start ? \"Stop\" : \"Start\"}\r\n            </Button>\r\n            <Button variant=\"contained\" color=\"secondary\" onClick={() => { resetWatch() }} className={classes.root}>\r\n                Reset\r\n            </Button>\r\n            <Button variant=\"contained\" onClick={() => { waitWatch() }} className={classes.root}>\r\n                Wait\r\n            </Button>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, { useContext } from 'react';\nimport './sass/App.sass';\n\nimport { TimerContextProvider } from './contexts/TimerProvider';\nimport { Display } from './components/Display'\nimport { Control } from './components/Control';\n\n\nfunction App() {\n\n  return (\n\n\n    <div className='App'>\n      <div className='container'>\n        <TimerContextProvider>\n          <Display />\n          <Control />\n        </TimerContextProvider>\n\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}